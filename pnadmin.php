<?php
/**
 * PostNuke Application Framework
 *
 * @copyright (c) 2002, PostNuke Development Team
 * @link http://www.postnuke.com
 * @version $Id: pnuser.php 19262 2006-06-12 14:45:18Z markwest $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package PostNuke_3rdParty
 * @subpackage ThemeGallery
 */

/**
 * the main user function
 *
 * @author       Mark West
 * @return       output       The main module page
 */
function ThemeGallery_admin_main()
{
    // Security check
    if (!SecurityUtil::checkPermission('ThemeGallery::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerError(_MODULENOAUTH, 403);
    }

    // Create output object
    $pnRender = pnRender::getInstance('ThemeGallery');

    // Return the output that has been generated by this function
    return $pnRender->fetch('themegallery_admin_main.htm');
}

/**
 * view items
 *
 * @author       Mark West
 * @param        integer      $startnum    (optional) The number of the start item
 * @return       output       The overview page
 */
function ThemeGallery_admin_view($args)
{
    // Security check
    if (!SecurityUtil::checkPermission('ThemeGallery::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerError(_MODULENOAUTH, 403);
    }

    // Get parameters from whatever input we need
    $startnum = (int)FormUtil::getPassedValue ('startnum', 0);

    // load the user language file
    pnModLangLoad('ThemeGallery', 'user');

    // Create output object
    $pnRender = pnRender::getInstance('ThemeGallery', false);

    // hard-coded pager for now....
    $itemsperpage = 10;

    // get all installed themes 
    $themes = pnThemeGetAllThemes(PNTHEME_FILTER_USER, PNTHEME_STATE_ACTIVE);

    foreach ($themes as $key => $theme) {
        // theme download link - TODO: integrate to downloads module 
        $themes[$key]['downloadlink'] = '#';
        $themes[$key]['previewimages'] = true;
        // check that we've got the right images for all themes
        $dir = DataUtil::formatForOS($theme['directory']);
        if (!file_exists('themes/'.$dir.'/images/preview_large.png') ||
            !file_exists('themes/'.$dir.'/images/preview_medium.png') ||
            !file_exists('themes/'.$dir.'/images/preview_small.png')) {
             $themes[$key]['previewimages'] = false;
        }
        // add options
        $themes[$key]['options'] = array();
        if (pnModAvailable('webthumb')) {
            $themes[$key]['options'][] = array('url' => pnModURL('ThemeGallery', 'admin', 'generatethumbs', array('themename' => $theme['name'])),
                                               'title' => _THEMEGALLERY_GENERATETHUMBS,
                                               'image' => 'package_application.gif');
        }
	}

    // get the theme count
    $themecount = count($themes);

    // page the themes
    $themes = array_chunk($themes, $itemsperpage);
    $themes = $themes[($startnum - 1)/$itemsperpage];

    $pnRender->assign('themes', $themes);

    // is theme changing allowed?
    $pnRender->assign('theme_change', pnConfigGetVar('theme_change'));

    // assign the values for the smarty plugin to produce a pager
    $pnRender->assign('pager', array('numitems'     => $themecount,
                                     'itemsperpage' => $itemsperpage));

    // Return the output that has been generated by this function
    return $pnRender->fetch('themegallery_admin_view.htm');
}

/**
 * Generate thumbnails for the theme
 *
 * This function uses the webthumb module (and service) to generate the initial image.
 * The thumbnail module is then used to resize this image into the required sizes
 *
 * @author       Mark West
 */
function ThemeGallery_admin_generatethumbs()
{
    // Get parameters from whatever input we need
    $themename = (string)FormUtil::getPassedValue ('themename', null);

    // Security check
    if (!SecurityUtil::checkPermission('ThemeGallery::', "$themename::", ACCESS_ADMIN)) {
        return LogUtil::registerError(_MODULENOAUTH, 403);
    }

    // get the theme info
    $themeinfo = pnThemeGetInfo(pnThemeGetIDFromName($themename));
    if (!$themeinfo) {
        return LogUtil::registerError(_NOSUCHITEM, 404);
    }

    $basePath = realpath(pnConfigGetVar('temp'));

    $files = array(array('w' => 600, 'h' => 450, 'dstFilename' => "{$basePath}\{$themename}\preview_large.png", 'baseFilename' => 'preview_large.png'), 
                   array('w' => 200, 'h' => 150, 'dstFilename' => "{$basePath}\{$themename}\preview_medium.pn", 'baseFilename' => 'preview_medium.png'),
                   array('w' => 140, 'h' => 105, 'dstFilename' => "{$basePath}\{$themename}\preview_small.png", 'baseFilename' => 'preview_small.png'));

    // generate the url to use for the thumbnail
    $url = pnModURL('ThemeGallery', 'user', 'loremipsum', array(theme => $themename), null, null, true);
    // for local testing.... replace with public url
    // $url = str_replace(pnGetBaseURL(), 'http://pnlab.markwest.me.uk/', $url);
    // get the thumbnail from the webthumb module
    pnModAPIFunc('webthumb', 'user', 'getthumb', array('url' => $url, 'filename' => "{$basePath}\\{$themename}.jpg"));

    // now use the thumbnail module to create images of correct sizes
    foreach ($files as $params) { 
        $params = array_merge(array('srcFilename' => "{$basePath}\\{$themename}.jpg"), $params);
        pnModAPIFunc('Thumbnail', 'user', 'resizeImage', $params);
    }

    // now, if we can, move the files into the theme and tidy up the temp directory
    $themePath = 'themes/'.$themeinfo['directory'].'/images';
    if (is_dir($themePath) && is_writable($themePath)) {
        foreach ($files as $params) {
            unlink($themePath.'/'.$params['baseFilename']);
            rename($params['dstFilename'], $themePath.'/'.$params['baseFilename']);
        }
        LogUtil::registerStatus(_THEMEGALLERY_PREVIEWSGENERATED);
    } else {
        LogUtil::registerError(_THEMEGALLERYNOTWRITABLE);
    }
    return pnRedirect(pnModURL('ThemeGallery', 'admin', 'view'));
}


/**
 * Modify configuration
 *
 * This is a standard function to modify the configuration parameters of the
 * module
 *
 * @author       Mark West
 * @return       output       The configuration page
 */
function ThemeGallery_admin_modifyconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission('ThemeGallery::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerError(_MODULENOAUTH, 403);
    }

    // load the user language file
    pnModLangLoad('ThemeGallery', 'user');

    // Create output object
    $pnRender = pnRender::getInstance('ThemeGallery', false);

    // Assign all the module variables to the template
    $pnRender->assign(pnModGetVar('ThemeGallery'));

    // Return the output that has been generated by this function
    return $pnRender->fetch('themegallery_admin_modifyconfig.htm');
}


/**
 * Update the configuration
 *
 * This is a standard function to update the configuration parameters of the
 * module given the information passed back by the modification form
 * Modify configuration
 *
 * @author       Mark West
 * @param        bold           print items in bold
 * @param        itemsperpage   number of items per page
 */
function ThemeGallery_admin_updateconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission('ThemeGallery::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerError(_MODULENOAUTH, 403);
    }

    // Get parameters from whatever input we need
    $itemsperpage = (int)FormUtil::getPassedValue ('itemsperpage', 10);

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        LogUtil::registerError(_BADAUTHKEY);
        return pnRedirect(pnModURL('ThemeGallery', 'admin', 'view'));
    }

    // make sure $itemsperpage is a positive integer
    if (!is_integer($itemsperpage) || $itemsperpage < 1) {
        LogUtil::registerError(_MODARGSERROR);
        $itemsperpage = (int)$itemsperpage;
        if ($itemsperpage < 1) {
            $itemsperpage = 10;
        }
    }
    pnModSetVar('ThemeGallery', 'itemsperpage', $itemsperpage);

    // Clear all caches for this module.
    $pnRender = pnRender::getInstance('ThemeGallery');
    $pnRender->clear_all_cache();

    // the module configuration has been updated successfuly
    LogUtil::registerStatus(_CONFIGUPDATED);

    // Let any other modules know that the modules configuration has been updated
    pnModCallHooks('module','updateconfig', 'ThemeGallery', array('module' => 'ThemeGallery'));

    return pnRedirect(pnModURL('ThemeGallery', 'admin', 'view'));
}

